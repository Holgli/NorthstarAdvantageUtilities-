

                ;******************************************************************************
                ;
                ;  
                ;  Boot2Adv - Transfer disk image from PC to a NortStar Advantage using
                ;             a SIO board in port 1 or 2 after this program has been loaded
                ;             to memory by using the Mini Monitor of the Advantage (see
                ;             LOADER.ASM). 
                ;
                ;       This program is a PC2Flop-like program. It borrows much of the 
                ;       ideas and the code of these programs written by Mikle Douglas. 
                ;
                ;       - use BIOS code of Northstar Graphics CP/M
                ;       - reuse code of PC2Adv.ASM as much as possible
                ;       - write raw data of double sided double density disk in drive A or B
                ;         (512 bytes per sector, 10 sectors per track, 70 tracks). 
                ;       - use SIO board in port 1 or port 2 for the transfer of a disk image 
                ;         using the XMODEM protocol. The disk image is the linear sequence 
                ;         of the 512 byte sectors from track 0, sector 0 through 
                ;         track 69, sector 9
                ;
                ;       This program only runs standalone. Use MLAOD.COM to create BOOT2ADV.COM.
                ;
                ;       Written by Holger Linning
                ;
                ;       Rev      Date       Desc
                ;       1.0     01/23/20    Original 
                ;
                ;  based on:
                ;
                ;
                ;  PC2Flop - Transfer disk image from PC to floppy over serial port
                ;            using the IMSAI SIO-2 serial board and the North Star
                ;            single density floppy controller.
                ;
                ;       This program writes a North Star single density disk from a disk image
                ;       transmitted from a PC. The image is transmitted through a serial port
                ;       using the XMODEM checksum protocol. The image is written directly to
                ;       the floppy in raw format (256 bytes per sector, 10 sectors per track,
                ;       35 tracks). The disk image is the linear sequence of 256 byte sectors
                ;       from track 0, sector 0 through track 34 sector 9.
                ;
                ;       This program runs standalone at 0x100 or under CP/M.
                ;
                ;       Written by Mike Douglas
                ;
                ;       Rev      Date       Desc
                ;       1.0     09/22/19    Original
                ;
                ;*****************************************************************************
                
                
 FFFF =         TRUE    equ     0ffffh          ;define value of true 
 0000 =         FALSE   equ     NOT TRUE        ;define value of false 
                
                ;*****************************************************************************
                ;
                ;  Switch for running under Advantage emulator ADE or not 
                ;   
                ;     see: North Star Advantage Z80 Computer Emulator (ADE) 
                ;          Jack Strangio
                ;          http://www.itelsoft.com.au/north_star_advantage_emulator.html
                ;
                ;  The emulator can be used for testing and debugging this program. If
                ;  runnuing under ADE set the directive to TRUE.
                ;
                ;*****************************************************************************
                
 0000 =         ADE     equ     FALSE           ;TRUE = ADE, FALSE = real Machine
                
                
                ;*****************************************************************************
                ; Disk information equates
                
 0046 =         NUMTRK  equ     70              ;number of tracks
 0028 =         NUMSEC  equ     40              ;number of sectors per track (logical CPM sectors)
 0080 =         SECLEN  equ     128             ;sector length (logical CPM sectors)
 0000 =         MINDRV  equ     0               ;first drive number
 0001 =         MAXDRV  equ     1               ;max drive number 
                
 1400 =         TRKLEN  equ     (NUMSEC*SECLEN) ;length of track in bytes
                
                ; BIOS jump table entry points
 ED00 =         BIOSEntry  equ  0ed00h          ;start od BIOS
 0000 =         BOOT    equ     00h             ;Cold start 
 0003 =         WBOOT   equ     BOOT+3          ;Warm boot
 0006 =         CONST   equ     BOOT+6          ;Console status
 0009 =         CONIN   equ     BOOT+9          ;Console input
 000C =         CONOUT  equ     BOOT+12         ;Console output
 000F =         LIST    equ     BOOT+15         ;Printer output
 0012 =         PUNCH   equ     BOOT+18         ;Paper tape punch output
 0015 =         READER  equ     BOOT+21         ;Paper tape reader input
 0018 =         HOME    equ     BOOT+24         ;Move disc head to track 0
 001B =         SELDSK  equ     BOOT+27         ;Select disc drive
 001E =         SETTRK  equ     BOOT+30         ;Set track number
 0021 =         SETSEC  equ     BOOT+33         ;Set sector number
 0024 =         SETDMA  equ     BOOT+36         ;Set DMA address
 0027 =         READ    equ     BOOT+39         ;Read a sector
 002A =         WRITE   equ     BOOT+42         ;Write a sector
                
                ; XMODEM equates
                        IF      NOT ADE
 0001 =         SOH     equ     001h
 0004 =         EOT     equ     004h
 0006 =         ACK     equ     006h
 0015 =         NAK     equ     015h
                        ENDIF
                
                        IF      ADE
                DUMMY   equ     0ffh
                SOH     equ     DUMMY           ;use dummy values for XMODEM            
                EOT     equ     DUMMY           
                ACK     equ     DUMMY
                NAK     equ     DUMMY
                        ENDIF
                
 0080 =         PKTLEN  equ     128             ;128 byte xmodem packet length
 000A =         XMTRIES equ     10              ;number of xmodem retries
                
                ; character equates
 000D =         CR      equ     13              ;ascii for carriage return
 000A =         LF      equ     10              ;ascii for line feed
 007F =         DEL     equ     7Fh             ;ascii DEL
 0008 =         BS      equ     08h             ;ascii backspace
 0003 =         CTRLC   equ     03              ;ascii for control-c
 001E =         CRSHOME equ     1eh             ;cursor home
 000F =         CLRSCR  equ     0fh             ;clear screen
                
                
 C000 =         BIAS    equ     0c000h          ;Start of ram after boot 
 0080 =         START   equ     00080h          ;load address of program (+0c00h)
                
                        IF NOT ADE              ;loading over serial only on real machine
                
                ;-----------------------------------------------------------------------------
                ;  Prepare start of Boot2Adv
                ;  Boot2Adv has been loaded to 0c080H before, loader program was typed in
                ;  at 0c000h. 
                ;  If using ADE this programm can run under CP/M.
                ;-----------------------------------------------------------------------------
 0080                   org     START   
                
                        ;map memory
 0080 3E01              mvi     a,1 
 0082 D3A0              out     0a0h            ; page 1 to A0 
 0084 3E02              mvi     a,2               
 0086 D3A1              out     0a1h            ; page 2 to A1
 0088 3E03              mvi     a,3               
 008A D3A2              out     0a2h            ; page 3 to A2
                
                        ;move program to first memory page
 008C 110001            lxi     d,init          ;DE = destination of copy 
 008F 2100C1            lxi     h,init + BIAS   ;HL = start of copy
 0092 010022            lxi     b,BiosDataEnd - init ;count of bytes
 0095 EDB0              dw      0b0edh          ;LDIR = copy memory
                
                        ;clear parity erros
 0097 3E02              mvi     a,2
 0099 D360              out     060h            ;clear parity errors, disable interrupts 
                        
 009B C30001            jmp     init;           ;jump to start address 00100h
                
                        ;fill space
 009E                   ds      init - $ + START
                
                        ENDIF
                        
 0100                   org     0100h   
                
                        IF ADE                  ;clear memory to simulate boot
                        xra     a
                        lxi     h,BiosDataEnd+1
                	lxi     d,BiosDataEnd+2
                	lxi     b,0ffffh - BiosDataEnd+3
                	mov     m,a
                        dw      0b0edh          ;LDIR
                        ENDIF
                
                ;-----------------------------------------------------------------------------
                ;  Initialize for transfer
                ;-----------------------------------------------------------------------------
 0100 315109    init    lxi     sp,ourStk       ;initialize stack pointer
 0103 CD0A07            call    restoreBios     ;restore BIOS
                
 0106 CD2C03            call    setDrvN         ;set drive names 
 0109 CD3C03            call    sizeRam         ;determine amount of RAM available
 010C 3E00              mvi     a,MINDRV        ;a=default drive
 010E 323E07            sta     drvNum          ;need for pgmExit
                
                        IF      ADE
                        lxi     h,0000h
                        shld    helpVal         ;init help var for debugging
                        ENDIF
                
                
                ;  Display welcome message, then get the drive number and port number
                ;    to use for the transfer from the operator.
                
 0111 216D03            lxi     h,mWelcom       ;display welcome message
 0114 CD8B02            call    dispMsg
                
                ; getDrv - get drive letter from the user.
                
 0117 212604    getDrv  lxi     h,mDrive        ;display drive number prompt
 011A CD8B02            call    dispMsg
 011D CDA002            call    rcvCon          ;get byte from the console
 0120 F620              ori     20h             ;upper case letters to lower case
 0122 FE78              cpi     'x'             ;exit requested?
 0124 CA0C03            jz      pgmExit         ;yes
 0127 214F07            lxi     h,baseDrv       ;ascii 1st drive - baseDrv = 0
 012A 96                sub     m
 012B FA1701            jm      getDrv          ;error, entry was < first drive
 012E FE02              cpi     MAXDRV-MINDRV+1 ;validate <= max drive
 0130 D21701            jnc     getDrv          ;invalid, prompt again
 0133 C600              adi     MINDRV          ;restore offset of 1st drive (if any)
 0135 323E07            sta     drvNum          ;save the drive number to use
                
 0138 CD9006            call    dRestor         ;restore to track 0 (selects drive)
                
                ; getPort - get serial port number 1-2 from the user.
                
 013B 217404    getPort lxi     h,mPort         ;display transfer port prompt
 013E CD8B02            call    dispMsg
 0141 CDA002            call    rcvCon          ;get byte from the console
 0144 F620              ori     20h             ;upper to lower case, nums not affected
 0146 FE78              cpi     'x'             ;exit requested?
 0148 CA0C03            jz      pgmExit         ;yes
 014B D631              sui     '1'             ;'1' to 0
 014D FE02              cpi     2               ;validate input was '1' or '2'
 014F D23B01            jnc     getPort         ;invalid, prompt again
 0152 324907            sta     xfrPort         ;save the port to use
                
 0155 CDE005            call    initPort        ;initialize serial port 
                
                ; Prompt the user to insert the disk to write, initialize, then start
                ;   sending NAK to start the XMODEM reception.
                
 0158 21CD04            lxi     h,mStart        ;display start file transfer prompt
 015B CD8B02            call    dispMsg
                        
 015E AF                xra     a               ;init track counter
 015F 323F07            sta     curTrk          ;start with track 0
                        
 0162 3C                inr     a               ;init xmodem block number to one
 0163 324A07            sta     blkNum
                
 0166 3E15              mvi     a,NAK           ;send starting nak after purging input data
 0168 CDCE02            call    purgSio         
                
                ;-----------------------------------------------------------------------------
                ;  mainLp - Receive as many packets as will fit into RAM and then write
                ;      tracks to disk. Repeat until entire disk is written. 
                ;-----------------------------------------------------------------------------
 016B 216405    mainLp  lxi     h,mRecv         ;display "Receiving"    
 016E CD8B02            call    dispMsg
                        
 0171 CD5806            call    initBf          ;init buffering 
                        
 0174 CDC701            call    bufPkts         ;buffer as many packets as possible
                
 0177 2A4D07            lhld    rcvPtr          ;hl=start of last packet received
 017A EB                xchg                    ;de=start of last packet received
 017B 210010            lxi     h,trkBuf        ;hl=start of track buffer
 017E CD6103            call    cmpDeHl         ;compare last packet start - trkBuf
 0181 DAB901            jc      allDone         ;nothing received but an EOT
                
 0184 219D05            lxi     h,mWrite        ;display "Writing"      
 0187 CD8B02            call    dispMsg
                
                ; trkLoop - write tracks until all disk tracks have been written or all
                ;    the tracks in the buffer have been written.
                
 018A CD6202    trkLoop call    wrtTrak         ;write a track
                
 018D 3A4207            lda     wrtTrk          ;increment written tracks in buffer 
 0190 3C                inr     a
 0191 324207            sta     wrtTrk  
                
 0194 CD7606            call    setNTrk         ;set next track (return in a)
                
 0197 FE46              cpi     NUMTRK          ;done all tracks?
 0199 CAB901            jz      allDone         ;yes
                        
 019C CDF706            call    getEndB         ;hl=end of written tracks in buffer
 019F EB                xchg                    ;de=next track pointer
 01A0 2A4D07            lhld    rcvPtr          ;hl=start of last packet received
 01A3 CD6103            call    cmpDeHl         ;compare end of buffer - rcvPtr
                
 01A6 DA8A01            jc      trkLoop         ;another track is present
                
 01A9 3A5007            lda     eotFlag         ;see if EOT terminated the reception
 01AC FE04              cpi     EOT     
 01AE CAB901            jz      allDone         ;if so, probably a single side disk
 01B1 3E06              mvi     a,ACK           ;ACK the last packet or EOT
 01B3 CDD802            call    sndByte
 01B6 C36B01            jmp     mainLp          ;go receive more packets
                
                ; allDone - The disk is completely written. ACK the final packet (or EOT),
                ;     display the "transfer complete" message and start the program over.
                
 01B9 3E06      allDone mvi     a,ACK           ;ACK the final packet or EOT
 01BB CDD802            call    sndByte
 01BE 21F704            lxi     h,mDone         ;hl->done message
 01C1 CD8B02            call    dispMsg
 01C4 C31701            jmp     getDrv          ;start over asking for drive num
                
                ;-----------------------------------------------------------------------------
                ; bufPkts - Receive XMODEM packets until we fill all the track buffer
                ;   space available. Reception starts at the address pointed to by
                ;   rcvPtr. Reception is stopped when the last packet exactly
                ;   fills the end of the last track spot in RAM. rcvPtr is
                ;   updated on exit to point to the start of the last packet received.
                ;   The disk write routines use this pointer to know where data ends and
                ;   then update rcvPtr to start to where to begin receiving new packets.
                ;-----------------------------------------------------------------------------
 01C7 2A4D07    bufPkts lhld    rcvPtr
 01CA CDF701            call    rcvPkt          ;receive a packet (Pointer to buffer in HL) 
                
 01CD E5                push    h
 01CE CD9802            call    dispPgs         ;show progress
 01D1 E1                pop     h
                
 01D2 EB                xchg                    ;de=current xmodem receive pointer
 01D3 325007            sta     eotFlag         ;save status returned (may be EOT)
 01D6 FE04              cpi     EOT             ;EOT received?
 01D8 CAED01            jz      bufDone         ;yes, buffering is done
 01DB 2A4507            lhld    bufEnd          ;hl=end of buffering space
 01DE CD6103            call    cmpDeHl         ;compare current-end    
 01E1 D2ED01            jnc     bufDone         ;past or at end, buffering is done
 01E4 3E06              mvi     a,ACK           ;otherwise, ACK the packet
 01E6 CDD802            call    sndByte
 01E9 EB                xchg                    ;put xmodem rcv pointer back in HL
 01EA C3C701            jmp     bufPkts         ;buffer some more
                
                ; bufDone - no more room for packets. Update rcvPtr to point to the 
                ;   start of the last packet received so the disk write routines know
                ;   where data ends.
                
 01ED 224D07    bufDone shld    rcvPtr          ;save use by write tracks
 01F0 C9                ret
                
                ;-----------------------------------------------------------------------------
                ; rcvPkt - receive an xmodem format 128 byte packet. HL points to the 128 byte
                ;    buffer to receive. HL is updated by 128 bytes after each succuessful
                ;    reception of a new 128 byte packet.
                ;-----------------------------------------------------------------------------
                
 01F1 E1        nakPkt  pop     h               ;get HL back
 01F2 3E15              mvi     a,NAK
 01F4 CDCE02            call    purgSio         ;purge receive for 1s then transmit NAK
                
                ;wait for SOH or EOT
                
                rcvPkt  
                        IF ADE                     ;fill buffer with dummy values
                        push    h               ;save pointer
                        lhld    helpVal;        ;load help value
                        inx     h               ;increment to produce new value
                        mov     a,l             ;use lower byte fo fill buffere
                        shld    helpVal         ;save new helpVal
                        pop     h               ;get pointer back
                        mvi     b,PKTLEN        
                dmmyLp  mov     m,a
                        inx     h
                        dcr     b    
                        jnz     dmmyLp
                        shld    rcvPtr          ;update pointer
                        xra     a                  ;return a zero
                        ret
                        ENDIF
                        
 01F7 E5                push    h               ;save HL for retries
 01F8 CDF902    waitSoh call    chkQuit         ;check for user abort
 01FB 3E03              mvi     a,3             ;3 second timeout for soh
 01FD CDDF02            call    rcvByte         ;receive character with timeout
 0200 CAF101            jz      nakPkt          ;timeout
 0203 FE01              cpi     SOH             ;SOH received?
 0205 CA0F02            jz      haveSoh
 0208 FE04              cpi     EOT             ;EOT to say we're done?
 020A C2F801            jnz     waitSoh         ;no, keep looking for SOH
 020D E1                pop     h               ;undo the entry push
 020E C9                ret                     ;return with EOT
                
                ;  Have SOH, receive block number and not block number
                
 020F 3E01      haveSoh mvi     a,1             ;one second timeout once inside a packet
 0211 CDDF02            call    rcvByte         ;get the block number
 0214 CAF101            jz      nakPkt          ;timeout, NAK and start over
 0217 324B07            sta     rcvBlk          ;save the received block number
 021A 3E01              mvi     a,1             ;one second timeout
 021C CDDF02            call    rcvByte         ;get not block number
 021F CAF101            jz      nakPkt          ;timeout, NAK and start over
 0222 324C07            sta     rcvNBlk         ;save not block number
                
                ;  Receive the 128 byte block
                
 0225 1E00              mvi     e,0             ;init checksum
 0227 1680              mvi     d,pktLen        ;d is byte counter
 0229 3E01      pktLoop mvi     a,1             ;one second timeout
 022B CDDF02            call    rcvByte         ;get next data byte
 022E CAF101            jz      nakPkt          ;timeout
 0231 77                mov     m,a             ;store the character
 0232 23                inx     h               ;point to next byte
 0233 83                add     e               ;update the checksum
 0234 5F                mov     e,a
 0235 15                dcr     d               ;decrement bytes remaining
 0236 C22902            jnz     pktLoop
                
                ;  Verify the checksum
                
 0239 3E01              mvi     a,1             ;one second timeout
 023B CDDF02            call    rcvByte         ;get the checksum
 023E CAF101            jz      nakPkt          ;timeout
 0241 BB                cmp     e               ;checksum match?
 0242 C2F101            jnz     nakPkt          ;no, packet error
                
                ;  Checksum good. Verify block numbers
                
 0245 3A4C07            lda     rcvNBlk         ;verify rcvBlk = not (rcvNBlk)
 0248 2F                cma                     ;A should = block number now
 0249 47                mov     b,a             ;save in b
 024A 3A4B07            lda     rcvBlk
 024D B8                cmp     b               ;compare rcvBlk = not(rcvNBlk)?
 024E C2F101            jnz     nakPkt          ;no, error
 0251 3A4A07            lda     blkNum          ;compare rcvBlk = expected blkNum
 0254 B8                cmp     b
 0255 C2F101            jnz     nakPkt          ;nak if not the same (also nak's re-send)
 0258 3C                inr     a               ;increment expected block number
 0259 324A07            sta     blkNum
 025C C1                pop     b               ;get HL off stack, but don't clobber HL
 025D AF                xra     a               ;return a zero
 025E 224D07            shld    rcvPtr          ;point to next block
 0261 C9                ret
                
                ;-----------------------------------------------------------------------------
                ; wrtTrak - write NUMSEC sectors to the current track in trkBuf
                ;   as pointed to by trkPtr. After the track is written, trkPtr is updated
                ;   by the length of a track to point to the next track buffer. 
                ;-----------------------------------------------------------------------------
 0262 21DD05    wrtTrak lxi     h,mCRLF         ;new line for next blocks       
 0265 CD8B02            call    dispMsg
                
 0268 CD6606            call    initT           ;init track writing 
 026B CD9D06            call    dSeek           ;seek to the track
                
                ; wrtLoop - write a full track starting sector 0
                
 026E CDF902    wrtLoop call    chkQuit         ;check for ctrl-c
 0271 CDBD06            call    setSect         ;set desired sector 
 0274 CD7E06            call    dWrite          ;write the sector
 0277 CD9802            call    dispPgs         ;show progress
 027A CDB506            call    setNSec         ;set next sector 
 027D CDC906            call    setOffs         ;set new offset in buffer
 0280 3A4307            lda     wrtSec
 0283 3D                dcr     a
 0284 324307            sta     wrtSec          ;decrement sectors to write
 0287 C26E02            jnz     wrtLoop         ;loop until all sectors written
 028A C9                ret
                
                ;-----------------------------------------------------------------------------
                ; dispMsg - display the null-terminated message passed in hl on the
                ;    console device. Clobbers c, hl
                ;-----------------------------------------------------------------------------
 028B 7E        dispMsg mov     a,m             ;get the next message byte
 028C B7                ora     a               ;null terminates
 028D C8                rz
                        
 028E 4F                mov     c,a             ;CONOUT wants character in c
 028F 1E0C              mvi     e,CONOUT
 0291 CD4B06            call    BIOS
 0294 23                inx     h               ;move to next byte
 0295 C38B02            jmp     dispMsg
                
                ;-----------------------------------------------------------------------------
                ; dispPgs - display progress
                ;    Clobbers c
                ;-----------------------------------------------------------------------------
 0298 0E2E      dispPgs mvi     c,'.'           ;CONOUT wants character in c
 029A 1E0C              mvi     e,CONOUT
 029C CD4B06            call    BIOS
 029F C9                ret     
                
                ;-----------------------------------------------------------------------------
                ; rcvCon - Receive a character from the console device, echo it, then
                ;   wait for a CR. Exits program if Ctrl-c typed. Returns with invalid
                ;   character (null) if BS or DEL pressed after 1st character
                ;   Returns character in a, clobbers c.
                ;-----------------------------------------------------------------------------
 02A0 1E09      rcvCon  mvi     e,CONIN
 02A2 CD4B06            call    BIOS            ;check for input
                
 02A5 E67F              ani     7fh
 02A7 FE03              cpi     CTRLC           ;abort requested?
 02A9 CA0C03            jz      pgmExit         ;yes
                
 02AC FE0D              cpi     CR              ;return pressed?
 02AE C8                rz                      ;yes, don't echo it
                
 02AF 4F                mov     c,a             ;CONOUT needs character in c
 02B0 1E0C              mvi     e,CONOUT
 02B2 CD4B06            call    BIOS            ;echo it
                
                ; Wait for CR, then return 1st character typed
 02B5 1E09      rcvCr   mvi     e,CONIN
 02B7 CD4B06            call    BIOS            ;check for input
                
 02BA E67F              ani     7fh
 02BC FE03              cpi     CTRLC           ;abort requested?
 02BE CA0C03            jz      pgmExit         ;yes
                
 02C1 FE7F              cpi     DEL             ;delete
 02C3 C8                rz                      ;yes, return DEL character
                
 02C4 FE08              cpi     BS              ;backspace?
 02C6 C8                rz                      ;yes, return BS character
 02C7 FE0D              cpi     CR              ;return pressed?
                
 02C9 C2B502            jnz     rcvCr           ;no, keep waiting
 02CC 79                mov     a,c             ;return 1st character typed
 02CD C9                ret
                
                ;-----------------------------------------------------------------------------
                ; purgSio - Wait for 1 second of idle time on receive line, then transmit the
                ;       character passed in A (usually ACK or NAK). Clobbers b
                ;-----------------------------------------------------------------------------
 02CE F5        purgSio push    a
 02CF 3E01      purge   mvi     a,1             ;1 second timeout
 02D1 CDDF02            call    rcvByte         ;wait for 1 second without activity
                
                        IF NOT ADE              ;wait only on real machine
 02D4 C2CF02            jnz     purge
                        ENDIF
                
 02D7 F1                pop     a               ;get back the character to send
                                                ;fall through to sndByte
                ;-----------------------------------------------------------------------------
                ; sndByte - send the byte in a through the specified transfer port. 
                ;     Clobbers b. (assuming serOut clobbers only a).
                ;-----------------------------------------------------------------------------
 02D8 47        sndByte mov     b,a             ;b=byte to transmit
 02D9 3A4907            lda     xfrPort         ;a=port to use for transfer
 02DC C33106            jmp     serOut          ;send the character
                
                ;-----------------------------------------------------------------------------
                ; rcvByte - Receive a byte from the specified transfer port. A wait timeout
                ;     in seconds is specified in a. If a timeout occurs, zero is returned in
                ;     a and the zero flag is true. Otherwise, the character is returned in a 
                ;     (could be zero) and the zero flag is false. ONESEC must be set based on
                ;     processor speed and the number of cycles in the serIn call + 59.
                ;     Clobbers a, b and c.
                ;-----------------------------------------------------------------------------
 02DF D5        rcvByte push    d               ;save d, e
 02E0 57                mov     d,a             ;save timeout in d
                
 02E1 01B49A    initSec lxi     b,ONESEC        ;bc=cycles through this loop for 1s
 02E4 3A4907    rcvWait lda     xfrPort         ;(13) a=port to use for transfer
 02E7 CD1D06            call    serIn           ;(17+42) look for a byte
 02EA C2F702            jnz     haveChr         ;(10) byte received
 02ED 0B                dcx     b               ;(5) otherwise, decrement timer
 02EE 78                mov     a,b             ;(5) one second expire?
 02EF B1                ora     c               ;(4)
 02F0 C2E402            jnz     rcvWait         ;(10) no, keep waiting
                
                ; one second timeout has occured. Decrement the seconds counter.
                
 02F3 15                dcr     d               ;decrement seconds counter
 02F4 C2E102            jnz     initSec         ;initialize for another 1 second count
 02F7 D1        haveChr pop     d               ;restore d, e
 02F8 C9                ret
                
                ;--------------------------------------------------------------
                ; chkQuit - check for the user to request abort (ctrl-c). If
                ;    a character is present on the console port, read it and
                ;    see if ctrl-c. Clobbers A
                ;--------------------------------------------------------------
 02F9 1E06      chkQuit mvi     e,CONST
 02FB CD4B06            call    BIOS            ;check for console input
 02FE FE00              cpi     00h             ;0 = no character
 0300 C8                rz
                        
 0301 E67F              ani     7fh
 0303 FE03              cpi     CTRLC           ;abort requested?
 0305 C0                rnz                     ;no
                
                ; Ctrl-C typed while program is running. Return to drive prompt.
                
 0306 315109            lxi     sp,ourStk       ;initialize stack pointer
 0309 C31701            jmp     getDrv          ;start over asking for drive num
                
                ;--------------------------------------------------------------
                ; pgmExit - Exit 
                ;--------------------------------------------------------------
                
                ; If drive was used, prompt user to insert disk
                
 030C 3A3E07    pgmExit lda     drvNum          ;boot drive used?
 030F D600              sui     MINDRV
 0311 C21D03            jnz     noDisk          ;not 1, disk prompt not needed
                        
 0314 212D05            lxi     h,mBoot         ;display "insert boot disk"     
 0317 CD8B02            call    dispMsg
 031A CDA002            call    rcvCon          ;wait for a character
                        
 031D 211D05    noDisk  lxi     h,mExit         ;display "exiting" message
 0320 CD8B02            call    dispMsg
                        
 0323 2100ED            lxi     h,BIOSEntry
 0326 1600              mvi     d,00h
 0328 1E00              mvi     e,BOOT
 032A 19                dad     d
 032B E9                pchl                    ;boot
                
                ;--------------------------------------------------------------
                ; Change drive prompt message to show drive
                ; letters instead of drive numbers and change baseDrv to convert
                ; an 'A' to the base drive number (MINDRV).
                ;--------------------------------------------------------------
                
 032C 3E41      setDrvN mvi     a,'A'           ;'A' in drive message instead of number
 032E 326004            sta     mDrvMin
 0331 C601              adi     MAXDRV-MINDRV   ;max drive letter
 0333 326204            sta     mDrvMax
 0336 3E61              mvi     a,'a'           ;ascii 1st drive - baseDrv = 0
 0338 324F07            sta     baseDrv
 033B C9                ret
                
                ;------------------------------------------------------------------
                ; sizeRam - determine how much RAM we have for buffering tracks.
                ;   Sets the bufEnd variable which points to end address of 
                ;   the last possible track buffer + 1
                ;------------------------------------------------------------------
 033C 2100ED    sizeRam lxi     h,BIOSEntry     ;BIOS entry is end of usable memory
                
 033F EB        ramEnd  xchg                    ;de=end of RAM + 1
 0340 3EEB              mvi     a,-((TRKLEN SHR 8) + 1) AND 0ffh
 0342 BA                cmp     d               ;force de < (10000h - TRKLEN)
 0343 D24703            jnc     topOk
 0346 57                mov     d,a             ;limit max address
 0347 210010    topOk   lxi     h,trkBuf        ;hl=start of track buffer
 034A 010014            lxi     b,TRKLEN        ;bc=length of track in bytes
                
                ; Loop increasing hl by TRKLEN until hl > end of RAM.
                
 034D 09        bfEndLp dad     b               ;hl=hl+track length
 034E CD5C03            call    cmpHlDe         ;compare hl-de
 0351 DA4D03            jc      bfEndLp         ;still more room, keep going
                
                ; Subtrack one track length from hl, this will be the end address + 1 of
                ;   the the last track buffer that will fit in RAM
                
 0354 0100EC            lxi     b,-TRKLEN       ;subtract one track length
 0357 09                dad     b               ;hl = end address of last track + 1
 0358 224507            shld    bufEnd          ;save as bufEnd
 035B C9                ret
                
                ;--------------------------------------------------------------------
                ; cmHlDe - compare HL-DE. Carry set if HL<DE, carry clear if HL>=DE
                ;--------------------------------------------------------------------
 035C 7D        cmpHlDe mov     a,l             ;compare HL-DE, do lsbs first
 035D 93                sub     e
 035E 7C                mov     a,h             ;do msbs
 035F 9A                sbb     d
 0360 C9                ret                     ;carry set HL<DE, clear HL>=DE
                
                ;--------------------------------------------------------------------
                ; cmDeHl - compare DE-HL. Carry set if DE<HL, carry clear if DE>=HL
                ;--------------------------------------------------------------------
 0361 7B        cmpDeHl mov     a,e             ;compare DE-HL, do lsbs first
 0362 95                sub     l
 0363 7A                mov     a,d             ;do msbs
 0364 9C                sbb     h
 0365 C9                ret                     ;carry set DE<HL, clear DE>=HL
                
                ;--------------------------------------------------------------------
                ; subHlDe - HL=HL-DE
                ;--------------------------------------------------------------------
 0366 7D        subHlDe mov     a,l             ;subtract HL-DE, do lsbs first
 0367 93                sub     e
 0368 6F                mov     l,a             ;lsb result in l
 0369 7C                mov     a,h             ;do msbs
 036A 9A                sbb     d
 036B 67                mov     h,a             ;msb result in h        
 036C C9                ret
                ;-----------------------------------------------------------------------------
                ;   Data Area
                ;-----------------------------------------------------------------------------
 036D 0D0A0A    mWelcom db      cr,lf,lf
 0370 3D3D3D3D3D        db      '===== PC to Northstar Advantage Boot Image Transfer v1.0 ====='
 03AE 0D0A0A            db      cr,lf,lf        
 03B1 5468697320        db      'This program writes a North Star Advantage floppy disk from'
 03EC 0D0A              db      cr,lf
 03EE 6120626F6F        db      'a boot image received through a serial port via XMODEM.',0
                
 0426 0D0A0A496EmDrive  db      cr,lf,lf,'Insert formatted floppy and specify destination drive ('
 0460 782D      mDrvMin db      'x-'
 0462 7829206F72mDrvMax db      'x) or X to exit: ',0
                
 0474 0D0A0A    mPort   db      cr,lf,lf
 0477 5370656369        db      'Specify the port of the SIO card to use for the image ',cr,lf
 04AF 7472616E73        db      'transfer (1-2) or X to exit: ',0
                
 04CD 0D0A0A    mStart  db      cr,lf,lf
 04D0 5374617274        db      'Start XMODEM send of boot image now...',0
                
 04F7 0D0A0A4372mDone   db      cr,lf,lf,'Creation of new disk successful!',cr,lf,0
                
 051D 0D0A0A4578mExit   db      cr,lf,lf,'Exiting...',cr,lf,0
                
 052D 0D0A0A    mBoot   db      cr,lf,lf
 0530 496E736572        db      'Insert boot disk into drive A, then press Return...',0
                
 0564 0D0A0A    mRecv   db      cr,lf,lf
 0567 5265636569        db      'Receiving image data from PC (dot = XMODEM packet)',cr,lf,lf,0
                
 059D 0D0A0A    mWrite  db      cr,lf,lf
 05A0 5772697469        db      'Writing buffer to floppy disk (line = track, dot = sector)',cr,lf,0
                
 05DD 0D0A00    mCRLF   db      cr,lf, 0
                
                ;****************************************************************************
                ;
                ;  Hardware specific console and serial I/O routines. 
                ;     The following four routines must be written to provide a common
                ;     interface to the hardware on which this program is running. The
                ;     port number specified for serIn and serOut matches the port number
                ;     input from the operator via the port menu.
                ;
                ;****************************************************************************
                
                ; 8251 UART Equates
                
 0051 =         SIOACR  equ     51h             ;control, SIO Board in slot 1
 0050 =         SIOADR  equ     50h             ;data, SIO Board in slot 1
 0058 =         SIOBDA  equ     58h             ;baud, SIO Board in slot 1
                
 0041 =         SIOBCR  equ     41h             ;control, SIO Board in slot 2
 0040 =         SIOBDR  equ     40h             ;data, SIO Board in slot 2
 0048 =         SIOBDB  equ     48h             ;baud, SIO Board in slot 2
                
 0002 =         SIORDA  equ     02h             ;read data available flag
 0001 =         SIOTRE  equ     01h             ;transmit register empty flag
                
 007E =         BDRT    equ     126             ;set Baud rate of 9600 Baud, 16*CLK
                
                ; The rcvByte subroutine above times a one second timeout with a code
                ;    loop that calls the hardware specific serIn routine below. ONESEC
                ;    must be set based on processor speed and the number of cycles in 
                ;    the serIn call + 59 cycles for the rcvByte code. 
                
 9AB4 =         ONESEC  equ     39604           ;rcvByte loop count for 1 second (4mhz)
                
                ;----------------------------------------------------------------------------
                ; Init serial port
                ;-----------------------------------------------------------------------------
                
 05E0 3A4907    initPort lda    xfrPort         ;a=port to use for transfer
 05E3 B7                ora     a
 05E4 C20206            jnz     init2           ;2nd serial port
                
 05E7 3E7E      init1   mvi     a,BDRT
 05E9 D358              out     SIOBDA          ;set Baud rate
                        
 05EB 3E80              mvi     a,080h          ;USART commands to reset
 05ED D351              out     SIOACR
 05EF D351              out     SIOACR
 05F1 3E40              mvi     a,040h          
 05F3 D351              out     SIOACR          ;reset
                
 05F5 3ECE              mvi     a,0ceh          ;2 stop bits, no parity, 8 data bits, 16*CLK 
 05F7 D351              out     SIOACR          ;set mode
 05F9 3E37              mvi     a,037h          ;CMD: RTS, ER, RXF, DTR, TXEN
 05FB D351              out     SIOACR          ;give command 
                        
 05FD DB50              in      SIOADR          ;clear possible garbage
 05FF DB50              in      SIOADR
                
 0601 C9                ret
                
 0602 3E7E      init2   mvi     a,BDRT
 0604 D348              out     SIOBDB          ;set Baud rate
                        
 0606 3E80              mvi     a,080h          ;USART commands to reset
 0608 D341              out     SIOBCR
 060A D341              out     SIOBCR
 060C 3E40              mvi     a,040h          
 060E D341              out     SIOBCR          ;reset
                
 0610 3ECE              mvi     a,0ceh          ;2 stop bits, no parity, 8 data bits, 16*CLK 
 0612 D341              out     SIOBCR          ;set mode
 0614 3E37              mvi     a,037h          ;CMD: RTS, ER, RXF, DTR, TXEN
 0616 D341              out     SIOBCR          ;give command 
                        
 0618 DB40              in      SIOBDR          ;clear possible garbage
 061A DB40              in      SIOBDR
                
 061C C9                ret
                
                ;----------------------------------------------------------------------------
                ; Hardware specific I/O
                ; serIn - input character from port specified in a
                ;       0 = first serial port
                ;       1 = second serial port
                ;    inputs: a = port to read from
                ;    outputs: z true if no character present
                ;             z false if character returned in a
                ; 42 cycles including return when no character present
                ;-----------------------------------------------------------------------------
 061D B7        serIn   ora     a               ;(4) port 0 or 1?
 061E C22906            jnz     s2InB           ;(10) port 1, 2nd serial port
                
                ; Input from 1st serial port
                
 0621 DB51      s2InA   in      SIOACR          ;(10+1) see if a new character is present
                        
                        IF      ADE
                        mvi     a,SIORDA        ;character always available if ADE
                        ENDIF
                        
 0623 E602              ani     SIORDA          ;(7)
 0625 C8                rz                      ;(10) no character, return zero status
 0626 DB50              in      SIOADR          ;return character and non-zero status
                
                        IF      ADE
                        mvi     a,DUMMY         ;use just dummy character 
                        ENDIF
                
 0628 C9                ret     
                        
                ; Input from 2nd serial port
                
 0629 DB41      s2InB   in      SIOBCR          ;(10+1) see if a new character is present
                        
                        IF      ADE
                        mvi     a,SIORDA        ;character always available if ADE
                        ENDIF
                        
 062B E602              ani     SIORDA          ;(7)
 062D C8                rz                      ;(10) no character, return zero status
 062E DB40              in      SIOBDR          ;return character and non-zero status
                
                        IF      ADE
                        mvi     a,DUMMY         ;use just dummy character 
                        ENDIF
                
 0630 C9                ret             
                
                ;-----------------------------------------------------------------------------
                ; Hardware specific I/O
                ; serOut - output character to port specified in a
                ;       0 = console serial port
                ;       1 = second serial port
                ;    inputs: a = port to transmit through
                ;            b = character to send
                ;-----------------------------------------------------------------------------
 0631 B7        serOut  ora     a               ;port 0 or 1 ?
 0632 C24006            jnz     s2OutB          ;second serial port
                
                ; Send character through console serial port
                
 0635 DB51      S2OutA  in      SIOACR          ;wait for OK to transmit
 0637 E601              ani     SIOTRE
 0639 CA3506            jz      S2OutA
 063C 78                mov     a,b             ;a=character to transmit
 063D D350              out     SIOADR          ;send it
 063F C9                ret
                
                ; Send character through second serial port
                
 0640 DB41      s2OutB  in      SIOBCR          ;wait for OK to transmit
 0642 E601              ani     SIOTRE
 0644 CA4006            jz      s2OutB
 0647 78                mov     a,b             ;a=character to transmit
 0648 D340              out     SIOBDR          ;send it
 064A C9                ret
                
                ;****************************************************************************
                ;
                ; BIOS related routines
                ;
                ;****************************************************************************
                
                ;***Subroutine**************************************
                ;
                ; BIOS -  perform the BIOS calls based on parameter 
                ; in register E to make calls independent of memory 
                ; layout (CP/M Vers. 2.2 Rev A / CP/M Vers. 2.2 Rev 1.2.0) 
                ;
                ; input parameters for BIOS calls in A, C or BC
                ; output parameters for BIOS calls in A
                ; offset of BIOS function in E
                ; preserves HL
                ;
                ;***************************************************
                
 064B E5        BIOS    push    h               ;save HL
 064C CD5106            call    jmpBIOS         ;call BIOS function
 064F E1                pop     h               ;restore HL
 0650 C9                ret
                
 0651 2100ED    jmpBIOS lxi     h,BIOSEntry     ;start of BIOS in HL
 0654 1600              mvi     d,00h
 0656 19                dad     d               ;offset for BIOS call in E
 0657 E9                pchl                    ;jump to BIOS routine
                
                ;***Subroutine**************************************
                ; initBf - init vars for buffer 
                ;***************************************************
                
 0658 210010    initBf: lxi     h,trkBuf        ;buffer start
 065B 224007            shld    trkPtr          ;reset pointer
 065E 224D07            shld    rcvPtr
 0661 AF                xra     a
 0662 324207            sta     wrtTrk          ;init count of written tracks
 0665 C9                ret
                
                ;***Subroutine**************************************
                ; initT - init vars for writing track 
                ;***************************************************
                
 0666 AF        initT:  xra     a
 0667 324407            sta     curSec          ;start at sector 0
 066A 3E28              mvi     a,NUMSEC        ;init count of sectors to write
 066C 324307            sta     wrtSec         
 066F CDF706            call    getEndB         ;get start of buffer in HL
 0672 224007            shld    trkPtr          ;pointer to free buffer
 0675 C9                ret
                
                ;***Subroutine******************************
                ; setNTrk - set next track number
                ;*******************************************
                
 0676 3A3F07    setNTrk:lda     curTrk          ;current track accessed
 0679 3C                inr     a               ;move to next track 
 067A 323F07            sta     curTrk          ;new current track
 067D C9                ret                     
                
                ;***Subroutine**************************************
                ; dWrite - Write sector on current track to buffer at prt.
                ;***************************************************
                
 067E 2A4007    dWrite: lhld    trkPtr          ;pointer in buffer
 0681 44                mov     b,h             ;set dma address in BC
 0682 4D                mov     c,l             
 0683 1E24              mvi     e,SETDMA
 0685 CD4B06            call    BIOS            ;set dma address
 0688 0E01              mvi     c,01h           ;write must be immediate 
 068A 1E2A              mvi     e,WRITE          
 068C CD4B06            call    BIOS            ;write track
 068F C9                ret                     
                        
                ;***Subroutine*************************
                ; dRestor - Restore to track 0
                ; On Exit:
                ;   curTrk = 0 
                ;**************************************
                
 0690 CDA906    dRestor: call   setDrv          ;select drive
 0693 AF                xra     a
 0694 323F07            sta     curTrk          ;current track = 0
 0697 1E18              mvi     e,HOME          
 0699 CD4B06            call    BIOS            ;move head to track 0
 069C C9                ret                     
                
                ;***Subroutine**************************************
                ; dSeek - set drive and track
                ;***************************************************
                
 069D 3A3F07    dSeek:  lda     curTrk          ;load track number
 06A0 0600              mvi     b,00h           ;set track number in BC
 06A2 4F                mov     c,a             
 06A3 1E1E              mvi     e,SETTRK          
 06A5 CD4B06            call    BIOS            ;set track
 06A8 C9                ret                     
                        
                ;***Subroutine********************************
                ; setDrv - Select drive.
                ;*********************************************
                
 06A9 3A3E07    setDrv: lda     drvNum
 06AC 0600              mvi     b,00h
 06AE 4F                mov     c,a             ;set drive number in c
 06AF 1E1B              mvi     e,SELDSK          
 06B1 CD4B06            call    BIOS            ;set drive
 06B4 C9                ret                     
                        
                ;***Subroutine******************************
                ; setNSec - set next sector number
                ;*******************************************
                
 06B5 3A4407    setNSec:lda     curSec          ;last sector accessed
 06B8 3C                inr     a               ;move to next sector 
 06B9 324407            sta     curSec          ;new current sector
 06BC C9                ret                     
                
                ;***Subroutine******************************
                ; setSect - set current sector.
                ;*******************************************
                
 06BD 3A4407    setSect:lda     curSec          ;current sector
 06C0 0600              mvi     b,00h
 06C2 4F                mov     c,a             ;set sector number in BC
 06C3 1E21              mvi     e,SETSEC          
 06C5 CD4B06            call    BIOS            ;set sector
 06C8 C9                ret
                
                ;***Subroutine******************************
                ; setOffs - set offset for current track and 
                ;           sector in buffer.
                ;*******************************************
                
 06C9 210014    setOffs:lxi     h,TRKLEN        ;track length
 06CC EB                xchg                    ;track length in DE
 06CD 210010            lxi     h,trkBuf        ;buffer start
                
 06D0 3A4207            lda     wrtTrk          ;tracks already written
 06D3 FE00              cpi     00h
 06D5 CADD06            jz      cmpSOfS         ;compute sector offset in track
                
 06D8 19        addTr:  dad     d               ;HL = HL + DE
 06D9 3D                dcr     a                       
 06DA C2D806            jnz     addTr           ;on zero: HL = BufferStart + written tracks * TRKLEN 
                
                ;translate sector to find correct buffer position
 06DD E5        cmpSOfS push    h               ;HL start address of track in buffer
 06DE 3A4407            lda     curSec          ;number of logical sector to write
 06E1 211607            lxi     h,trslate       ;load start of translation table to HL
 06E4 1600              mvi     d,00h
 06E6 5F                mov     e,a             ;load current logical sector to DE
 06E7 19                dad     d               ;add to get address of number of physical sector
 06E8 7E                mov     a,m             ;load physical sector number to a
 06E9 E1                pop     h
                        
 06EA 37                stc
 06EB 3F                cmc                     ;clear carry
 06EC 1F                rar
 06ED 57                mov     d,a             ;D=sector >> 1
 06EE 1F                rar                     ;put lsbit into msbit   
 06EF E680              ani     80h
 06F1 5F                mov     e,a             ;DE = 128 * sector
 06F2 19                dad     d               ;HL = BufferStart + written tracks * TRKLEN + 128 * sector
 06F3 224007            shld    trkPtr          ;new pointer
 06F6 C9                ret
                
                ;***Subroutine******************************
                ; getEndB - get end of so far written buffer 
                ; and return address in HL
                ;*******************************************
                
 06F7 210014    getEndB:lxi     h,TRKLEN        ;track length
 06FA EB                xchg                    ;track length in DE
 06FB 210010            lxi     h,trkBuf        ;buffer start
                
 06FE 3A4207            lda     wrtTrk          ;tracks already written
 0701 FE00              cpi     00h
 0703 C8                rz      
                        
 0704 19        addTrB: dad     d               ;HL = HL + DE
 0705 3D                dcr     a                       
 0706 C20407            jnz     addTrB          ;on zero: HL = BufferStart + written tracks * TRKLEN 
 0709 C9                ret
                
                ;***Subroutine******************************
                ; restoreBios - copy BIOS back to the 
                ; original position
                ;*******************************************
                
                restoreBios:
 070A 1100ED            lxi     d,BIOSEntry     ;DE = destination of copy
 070D 210010            lxi     h,BiosDataStart ;HL = start of copy
 0710 010013            lxi     b,BiosDataEnd - BiosDataStart ;count of bytes
 0713 EDB0              dw      0b0edh          ;LDIR = copy memory
 0715 C9                ret
                
                ;**************************************************************************
                ; 
                ;  Data area
                ;
                ;**************************************************************************
                ; sector translation table
 0716 00010203  trslate db                       0, 1, 2, 3 
 071A 14151617          db                      20,21,22,23
 071E 04050607          db                       4, 5, 6, 7
 0722 18191A1B          db                      24,25,26,27
 0726 08090A0B          db                       8, 9,10,11
 072A 1C1D1E1F          db                      28,29,30,31
 072E 0C0D0E0F          db                      12,13,14,15
 0732 20212223          db                      32,33,34,35
 0736 10111213          db                      16,17,18,19
 073A 24252627          db                      36,37,38,39
                
                ; disk variables
                
 073E           drvNum  ds      1               ;drive number to use
 073F           curTrk  ds      1               ;current track number drive is on
 0740           trkPtr  ds      2               ;pointer into trkBuf at sector boundaries
 0742           wrtTrk  ds      1               ;count of tracks already written
 0743           wrtSec  ds      1               ;count of sectors already written
 0744           curSec  ds      1               ;current logical sector on track
 0745           bufEnd  ds      2               ;end address + 1 of last track spot in RAM
 0747           helpVal ds      2               ;dummy value
                        
                ; xmodem variables
                
 0749           xfrPort ds      1               ;pseudo port for file transfer
 074A           blkNum  ds      1               ;current xmodem block number
 074B           rcvBlk  ds      1               ;block number received
 074C           rcvNBlk ds      1               ;"not" block number received
 074D           rcvPtr  ds      2               ;pointer for start of XMODEM send
                
                ; misc variables
                
 074F           baseDrv    ds   1               ;ascii 1st drive - baseDrv = 0
 0750           eotFlag    ds   1               ;set to EOT if EOT terminated reception
 0751                      ds   512             ;stack space
                
 0951 =         ourStk  equ     $
 0951                   ds      PKTLEN          ;space for pre-pended unsent data
                        
 1000                   org     1000h           ;buffer
 1000 =         trkBuf  equ     $
                
                BiosDataStart:
 1000 C3D9FAC35C        db      0c3h, 0d9h, 0fah, 0c3h, 05ch, 0f6h, 0c3h, 003h, 0f4h, 0c3h, 006h, 0f4h, 0c3h, 076h, 0f2h
 1010 0CF4C30FF4        db      00ch, 0f4h, 0c3h, 00fh, 0f4h, 0c3h, 012h, 0f4h, 0c3h, 05fh, 0f2h, 0c3h, 0dfh, 0f0h, 0c3h
 1020 F2C368F2C3        db      0f2h, 0c3h, 068h, 0f2h, 0c3h, 06dh, 0f2h, 0c3h, 07eh, 0f2h, 0c3h, 08ch, 0f2h, 0c3h, 015h
 1030 C373F2C344        db      0c3h, 073h, 0f2h, 0c3h, 044h, 0f0h, 0c9h, 000h, 000h, 0c3h, 039h, 0edh, 0edh, 073h, 07ah
 1040 31B0FDF5E5        db      031h, 0b0h, 0fdh, 0f5h, 0e5h, 0d5h, 03eh, 005h, 0cbh, 079h, 0cah, 012h, 0eeh, 079h, 0e6h
 1050 4FFE033803        db      04fh, 0feh, 003h, 038h, 003h, 017h, 0e6h, 0c0h, 0f6h, 080h, 06fh, 03ah, 0f6h, 0f3h, 0a5h
 1060 111E287887        db      011h, 01eh, 028h, 078h, 087h, 087h, 087h, 087h, 0b2h, 057h, 0cbh, 018h, 030h, 01ah, 0cbh
 1070 18161E143E        db      018h, 016h, 01eh, 014h, 03eh, 022h, 090h, 030h, 005h, 0c6h, 023h, 047h, 0cbh, 0f5h, 07dh
 1080 40B00F0FE6        db      040h, 0b0h, 00fh, 00fh, 0e6h, 0f0h, 082h, 057h, 07ah, 032h, 078h, 0fdh, 07bh, 0b8h, 030h
 1090 CBED7D3274        db      0cbh, 0edh, 07dh, 032h, 074h, 0fdh, 0f3h, 0edh, 05bh, 012h, 0f6h, 0cdh, 0f8h, 0eeh, 03ah
 10A0 F3E67F20F6        db      0f3h, 0e6h, 07fh, 020h, 0f6h, 0c5h, 0cdh, 087h, 0efh, 03ah, 074h, 0fdh, 0d3h, 081h, 0c1h
 10B0 7DB72009DB        db      07dh, 0b7h, 020h, 009h, 0dbh, 0e0h, 0e6h, 010h, 03eh, 006h, 0c2h, 00eh, 0eeh, 0e5h, 0c5h
 10C0 C3F3060009        db      0c3h, 0f3h, 006h, 000h, 009h, 022h, 0c8h, 0f3h, 07eh, 0eeh, 059h, 0e5h, 0cch, 0f0h, 0efh
 10D0 F1CDF9EF3A        db      0f1h, 0cdh, 0f9h, 0efh, 03ah, 074h, 0fdh, 0d3h, 081h, 0cdh, 0deh, 0efh, 0c1h, 0e1h, 0b7h
 10E0 E5C45CEFB8        db      0e5h, 0c4h, 05ch, 0efh, 0b8h, 0f5h, 0dbh, 0e0h, 0e6h, 048h, 020h, 00dh, 0cdh, 01ch, 0efh
 10F0 20EF0DFAAC        db      020h, 0efh, 00dh, 0fah, 0ach, 0eeh, 0c3h, 025h, 0eeh, 0cdh, 0a6h, 0efh, 0f1h, 03ch, 018h
 1100 C1043A78FD        db      0c1h, 004h, 03ah, 078h, 0fdh, 03ch, 032h, 078h, 0fdh, 0f1h, 03dh, 0f5h, 020h, 0d1h, 0edh
 1110 12F631AEFD        db      012h, 0f6h, 031h, 0aeh, 0fdh, 0f5h, 0ebh, 0cdh, 03ch, 0f0h, 0ebh, 0dbh, 082h, 0f1h, 0c1h
 1120 ED7B7AFDC9        db      0edh, 07bh, 07ah, 0fdh, 0c9h, 0c5h, 021h, 023h, 000h, 0cdh, 004h, 0efh, 03ah, 0cfh, 0f3h
 1130 F7D3F8D382        db      0f7h, 0d3h, 0f8h, 0d3h, 082h, 021h, 009h, 000h, 0cdh, 004h, 0efh, 03ah, 0cfh, 0f3h, 0d3h
 1140 C10D216EEE        db      0c1h, 00dh, 021h, 06eh, 0eeh, 020h, 003h, 021h, 08eh, 0eeh, 0e3h, 0cdh, 069h, 0efh, 0dbh
 1150 FEFBC282EF        db      0feh, 0fbh, 0c2h, 082h, 0efh, 03ah, 078h, 0fdh, 047h, 0dbh, 080h, 0b8h, 032h, 079h, 0fdh
 1160 0000C8FEFB        db      000h, 000h, 0c8h, 0feh, 0fbh, 0c8h, 02ah, 0c8h, 0f3h, 036h, 059h, 0c3h, 0a7h, 0eeh, 0dbh
 1170 77A9074FCD        db      077h, 0a9h, 007h, 04fh, 0cdh, 0deh, 0eeh, 0dbh, 080h, 023h, 077h, 023h, 0a9h, 007h, 04fh
 1180 EDDB80A9DB        db      0edh, 0dbh, 080h, 0a9h, 0dbh, 082h, 0cah, 000h, 0eeh, 03eh, 002h, 0c3h, 00eh, 0eeh, 0dbh
 1190 BE2014A907        db      0beh, 020h, 014h, 0a9h, 007h, 04fh, 0cdh, 0deh, 0eeh, 0dbh, 080h, 023h, 0beh, 020h, 008h
 11A0 074F2310E9        db      007h, 04fh, 023h, 010h, 0e9h, 018h, 0dah, 03eh, 003h, 0c3h, 00eh, 0eeh, 001h, 000h, 022h
 11B0 83AFD380CD        db      083h, 0afh, 0d3h, 080h, 0cdh, 0deh, 0eeh, 010h, 0f8h, 03eh, 0fbh, 0d3h, 080h, 0e3h, 0e3h
 11C0 78FDD380E1        db      078h, 0fdh, 0d3h, 080h, 0e1h, 07eh, 023h, 0d3h, 080h, 0a9h, 007h, 04fh, 0cdh, 0deh, 0eeh
 11D0 D38023A907        db      0d3h, 080h, 023h, 0a9h, 007h, 04fh, 010h, 0edh, 079h, 0d3h, 080h, 0c3h, 000h, 0eeh, 0dbh
 11E0 E600C8DB00        db      0e6h, 000h, 0c8h, 0dbh, 000h, 012h, 013h, 0c9h, 0f5h, 0d5h, 0edh, 05bh, 012h, 0f6h, 0cdh
 11F0 EEED5312F6        db      0eeh, 0edh, 053h, 012h, 0f6h, 0d1h, 0f1h, 0c9h, 0edh, 053h, 012h, 0f6h, 0c3h, 008h, 0fbh
 1200 5B12F6C901        db      05bh, 012h, 0f6h, 0c9h, 001h, 0ffh, 0ffh, 0dbh, 0e0h, 0e6h, 000h, 0cah, 017h, 0efh, 009h
 1210 1BEFDB0012        db      01bh, 0efh, 0dbh, 000h, 012h, 013h, 0b7h, 009h, 0dah, 007h, 0efh, 0c9h, 021h, 098h, 001h
 1220 E0E640C0DB        db      0e0h, 0e6h, 040h, 0c0h, 0dbh, 0e0h, 0e6h, 000h, 0cah, 034h, 0efh, 0dbh, 0e0h, 0e6h, 040h
 1230 DB001213DB        db      0dbh, 000h, 012h, 013h, 0dbh, 0e0h, 0e6h, 040h, 0c0h, 02bh, 07ch, 0b5h, 0c2h, 01fh, 0efh
 1240 C3F33E04C3        db      0c3h, 0f3h, 03eh, 004h, 0c3h, 00eh, 0eeh, 021h, 0efh, 004h, 0cdh, 0deh, 0eeh, 0dbh, 0e0h
 1250 40C82B7CB5        db      040h, 0c8h, 02bh, 07ch, 0b5h, 020h, 0f3h, 018h, 0e6h, 0cdh, 01ch, 0efh, 0cdh, 0f8h, 0eeh
 1260 47EFCDD3EF        db      047h, 0efh, 0cdh, 0d3h, 0efh, 03ch, 0e6h, 00fh, 0c9h, 001h, 0e0h, 035h, 0edh, 070h, 0f8h
 1270 E0E600CA7D        db      0e0h, 0e6h, 000h, 0cah, 07dh, 0efh, 0edh, 070h, 0f8h, 0dbh, 000h, 012h, 013h, 0edh, 070h
 1280 10EA3E01C3        db      010h, 0eah, 03eh, 001h, 0c3h, 00eh, 0eeh, 0cdh, 0a6h, 0efh, 0feh, 00eh, 0c0h, 0afh, 032h
 1290 F3CDACEF06        db      0f3h, 0cdh, 0ach, 0efh, 006h, 064h, 0e5h, 0c5h, 0cdh, 0f8h, 0eeh, 021h, 096h, 001h, 0cdh
 12A0 EFC110F3E1        db      0efh, 0c1h, 010h, 0f3h, 0e1h, 0c9h, 0cdh, 0b1h, 0efh, 0feh, 00eh, 0c8h, 026h, 005h, 0cdh
 12B0 EF2600CDDE        db      0efh, 026h, 000h, 0cdh, 0deh, 0eeh, 03ah, 0cfh, 0f3h, 06fh, 0e6h, 0f8h, 0b4h, 067h, 0bdh
 12C0 12DBD06F7C        db      012h, 0dbh, 0d0h, 06fh, 07ch, 0d3h, 0f8h, 032h, 0cfh, 0f3h, 0cdh, 0deh, 0eeh, 0dbh, 0d0h
 12D0 F2CAEF2E80        db      0f2h, 0cah, 0efh, 02eh, 080h, 0dbh, 0d0h, 0e6h, 00fh, 0bdh, 0c8h, 06fh, 018h, 0f7h, 021h
 12E0 F37E71B9C8        db      0f3h, 07eh, 071h, 0b9h, 0c8h, 006h, 00ch, 0cdh, 096h, 0efh, 0cdh, 059h, 0efh, 0c8h, 018h
 12F0 E5CDDEEFCD        db      0e5h, 0cdh, 0deh, 0efh, 0cdh, 01ch, 0efh, 0e1h, 0afh, 047h, 096h, 070h, 0c8h, 02eh, 020h
 1300 F20DF02F3C        db      0f2h, 00dh, 0f0h, 02fh, 03ch, 067h, 0dbh, 0e0h, 0e6h, 020h, 0c0h, 02eh, 000h, 03ah, 074h
 1310 E6CFB56F7D        db      0e6h, 0cfh, 0b5h, 06fh, 07dh, 0d3h, 081h, 0f6h, 010h, 0d3h, 081h, 0eeh, 010h, 0d3h, 081h
 1320 F8F3A5E60F        db      0f8h, 0f3h, 0a5h, 0e6h, 00fh, 006h, 001h, 020h, 002h, 006h, 005h, 0cdh, 096h, 0efh, 0dbh
 1330 E620200325        db      0e6h, 020h, 020h, 003h, 025h, 020h, 0ddh, 006h, 003h, 0c3h, 096h, 0efh, 021h, 0ffh, 0f3h
 1340 5EC8FBC932        db      05eh, 0c8h, 0fbh, 0c9h, 032h, 076h, 0fdh, 03ah, 0e9h, 0f3h, 032h, 077h, 0fdh, 0e5h, 0d5h
 1350 3A76FDE60F        db      03ah, 076h, 0fdh, 0e6h, 00fh, 0cdh, 03ch, 0edh, 0c1h, 0d1h, 0e1h, 020h, 012h, 07bh, 0b7h
 1360 0C3AFFF3E6        db      00ch, 03ah, 0ffh, 0f3h, 0e6h, 040h, 01eh, 002h, 020h, 0ddh, 0cdh, 059h, 0efh, 0afh, 0c9h
 1370 D0F0FE0430        db      0d0h, 0f0h, 0feh, 004h, 030h, 006h, 03ah, 077h, 0fdh, 03dh, 020h, 0ceh, 079h, 0e6h, 00fh
 1380 D4F078E5D5        db      0d4h, 0f0h, 078h, 0e5h, 0d5h, 0c5h, 021h, 0dbh, 0f0h, 072h, 02bh, 0cdh, 0a5h, 0f0h, 079h
 1390 A5F07121CC        db      0a5h, 0f0h, 071h, 021h, 0cch, 0f0h, 03ah, 0d0h, 0f0h, 0cdh, 0b1h, 0f0h, 0c1h, 0d1h, 0e1h
 13A0 47F0AF37C9        db      047h, 0f0h, 0afh, 037h, 0c9h, 00eh, 0ffh, 0d6h, 00ah, 00ch, 030h, 0fbh, 0c6h, 00ah, 077h
 13B0 C9B7CDEAF3        db      0c9h, 0b7h, 0cdh, 0eah, 0f3h, 0b7h, 0c4h, 001h, 0f7h, 0afh, 0cdh, 0eah, 0f3h, 0b7h, 0cch
 13C0 EDFE03CA5C        db      0edh, 0feh, 003h, 0cah, 05ch, 0f6h, 047h, 03ah, 0f9h, 0f3h, 0b8h, 0c9h, 00dh, 00ah, 054h
 13D0 2020442020        db      020h, 020h, 044h, 020h, 020h, 020h, 053h, 020h, 020h, 020h, 020h, 000h, 00dh, 00ah, 080h
 13E0 2600AFCD36        db      026h, 000h, 0afh, 0cdh, 036h, 0edh, 022h, 06eh, 0fdh, 0ebh, 0b7h, 032h, 06ah, 0fdh, 0c0h
 13F0 3273FD7BFE        db      032h, 073h, 0fdh, 07bh, 0feh, 004h, 0d2h, 092h, 0f1h, 07dh, 0e6h, 001h, 0c2h, 07eh, 0f1h
 1400 4BF33A6EFD        db      04bh, 0f3h, 03ah, 06eh, 0fdh, 0cdh, 09ah, 0f1h, 0f6h, 080h, 04fh, 006h, 000h, 011h, 001h
 1410 3E012100FE        db      03eh, 001h, 021h, 000h, 0feh, 0cdh, 044h, 0f0h, 038h, 0f1h, 006h, 090h, 0cbh, 0b9h, 021h
 1420 FE7EE61011        db      0feh, 07eh, 0e6h, 010h, 011h, 01fh, 0f2h, 028h, 022h, 046h, 078h, 0e6h, 040h, 028h, 00eh
 1430 F8F3C5070D        db      0f8h, 0f3h, 0c5h, 007h, 00dh, 020h, 0fch, 0c1h, 011h, 03fh, 0f2h, 038h, 00eh, 03eh, 0bfh
 1440 47112FF2E6        db      047h, 011h, 02fh, 0f2h, 0e6h, 020h, 020h, 003h, 011h, 01fh, 0f2h, 03ah, 0f6h, 0f3h, 01fh
 1450 20FC380878        db      020h, 0fch, 038h, 008h, 078h, 0e6h, 002h, 0c2h, 0a6h, 0f3h, 018h, 00ah, 078h, 004h, 0e6h
 1460 280405114F        db      028h, 004h, 005h, 011h, 04fh, 0f2h, 0d5h, 02ah, 06eh, 0fdh, 011h, 0fah, 0f3h, 019h, 070h
 1470 7EF12BD11A        db      07eh, 0f1h, 02bh, 0d1h, 01ah, 077h, 013h, 001h, 00bh, 000h, 009h, 073h, 023h, 072h, 03ah
 1480 FD21CAF111        db      0fdh, 021h, 0cah, 0f1h, 011h, 011h, 000h, 03ch, 019h, 03dh, 020h, 0fch, 07eh, 032h, 06ah
 1490 23C9210000        db      023h, 0c9h, 021h, 000h, 000h, 0afh, 032h, 004h, 000h, 0c9h, 03dh, 0feh, 001h, 03ch, 038h
 14A0 21BDF1C641        db      021h, 0bdh, 0f1h, 0c6h, 041h, 0beh, 028h, 00ah, 077h, 021h, 0b5h, 0f1h, 0cdh, 001h, 0f7h
 14B0 09EDAF3CC9        db      009h, 0edh, 0afh, 03ch, 0c9h, 00dh, 00ah, 04dh, 04fh, 055h, 04eh, 054h, 020h, 041h, 03ah
 14C0 494E204452        db      049h, 04eh, 020h, 044h, 052h, 049h, 056h, 045h, 020h, 031h, 02ch, 020h, 054h, 059h, 050h
 14D0 20414E5920        db      020h, 041h, 04eh, 059h, 020h, 04bh, 045h, 059h, 00dh, 00ah, 080h, 010h, 000h, 000h, 019h
 14E0 0000000001        db      000h, 000h, 000h, 000h, 001h, 0fch, 040h, 0f2h, 09ah, 0fch, 081h, 0fch, 000h, 000h, 000h
 14F0 0000000000        db      000h, 000h, 000h, 000h, 000h, 001h, 0fch, 02fh, 0f2h, 0d3h, 0fch, 0bah, 0fch, 000h, 000h
 1500 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 001h, 0fch, 02fh, 0f2h, 00ch, 0fdh, 0f3h, 0fch, 000h
 1510 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 0fch, 02fh, 0f2h, 045h, 0fdh, 02ch, 0fdh
 1520 2800030700        db      028h, 000h, 003h, 007h, 000h, 0a4h, 000h, 03fh, 000h, 0c0h, 000h, 010h, 000h, 002h, 000h
 1530 2800040F01        db      028h, 000h, 004h, 00fh, 001h, 051h, 000h, 03fh, 000h, 080h, 000h, 010h, 000h, 002h, 000h
 1540 2800040F01        db      028h, 000h, 004h, 00fh, 001h, 0a9h, 000h, 03fh, 000h, 080h, 000h, 010h, 000h, 002h, 000h
 1550 2800051F03        db      028h, 000h, 005h, 01fh, 003h, 0c4h, 000h, 07fh, 000h, 080h, 000h, 020h, 000h, 002h, 000h
 1560 0000606922        db      000h, 000h, 060h, 069h, 022h, 06bh, 0fdh, 0c9h, 079h, 032h, 06dh, 0fdh, 0c9h, 060h, 069h
 1570 70FDC96960        db      070h, 0fdh, 0c9h, 069h, 060h, 0c9h, 0c5h, 0cdh, 04bh, 0f3h, 0c1h, 0c3h, 009h, 0f4h, 0cdh
 1580 F33E013269        db      0f3h, 03eh, 001h, 032h, 069h, 0fdh, 0afh, 032h, 072h, 0fdh, 018h, 046h, 0afh, 032h, 069h
 1590 2172FD0DFA        db      021h, 072h, 0fdh, 00dh, 0fah, 0a3h, 0f2h, 028h, 006h, 03ah, 06ah, 0fdh, 077h, 018h, 033h
 15A0 80182FB628        db      080h, 018h, 02fh, 0b6h, 028h, 02ch, 035h, 02ah, 065h, 0fdh, 0ebh, 02ah, 067h, 0fdh, 0b4h
 15B0 28F2B6F23E        db      028h, 0f2h, 0b6h, 0f2h, 03eh, 040h, 02ch, 095h, 020h, 002h, 06fh, 013h, 0e5h, 02ah, 06bh
 15C0 CD43F3D120        db      0cdh, 043h, 0f3h, 0d1h, 020h, 008h, 02ah, 06dh, 0fdh, 0cdh, 043h, 0f3h, 028h, 004h, 0afh
 15D0 72FD2A6BFD        db      072h, 0fdh, 02ah, 06bh, 0fdh, 0ebh, 02ah, 065h, 0fdh, 0cdh, 043h, 0f3h, 020h, 00eh, 02ah
 15E0 FDEB2A67FD        db      0fdh, 0ebh, 02ah, 067h, 0fdh, 0cdh, 043h, 0f3h, 0e6h, 0fch, 028h, 00eh, 0cdh, 04bh, 0f3h
 15F0 72FDE67F3E        db      072h, 0fdh, 0e6h, 07fh, 03eh, 000h, 020h, 001h, 03ch, 0b7h, 02ah, 06bh, 0fdh, 022h, 065h
 1600 2A6DFD2267        db      02ah, 06dh, 0fdh, 022h, 067h, 0fdh, 006h, 001h, 0c4h, 055h, 0f3h, 03ah, 067h, 0fdh, 0e6h
 1610 1F671F6F11        db      01fh, 067h, 01fh, 06fh, 011h, 000h, 0feh, 019h, 0edh, 05bh, 070h, 0fdh, 03ah, 069h, 0fdh
 1620 F5280432F3        db      0f5h, 028h, 004h, 032h, 0f3h, 0f3h, 0ebh, 001h, 080h, 000h, 0edh, 0b0h, 0f1h, 0c8h, 021h
 1630 FD7EB7F23A        db      0fdh, 07eh, 0b7h, 0f2h, 03ah, 0f3h, 0afh, 077h, 018h, 004h, 021h, 073h, 0fdh, 034h, 0cch
 1640 F3AFC97AAC        db      0f3h, 0afh, 0c9h, 07ah, 0ach, 03eh, 0ffh, 0c0h, 07bh, 0adh, 0c9h, 03ah, 0f3h, 0f3h, 0b7h
 1650 AF32F3F347        db      0afh, 032h, 0f3h, 0f3h, 047h, 03ah, 067h, 0fdh, 0e6h, 0fch, 00fh, 00fh, 04fh, 02ah, 065h
 1660 3A68FDB7FA        db      03ah, 068h, 0fdh, 0b7h, 0fah, 039h, 0edh, 0e5h, 0c5h, 0cdh, 09ah, 0f1h, 0c1h, 02ah, 068h
 1670 260011FAF3        db      026h, 000h, 011h, 0fah, 0f3h, 019h, 058h, 051h, 0f6h, 080h, 04fh, 07eh, 01fh, 030h, 012h
 1680 B7CAA6F3E3        db      0b7h, 0cah, 0a6h, 0f3h, 0e3h, 07dh, 0feh, 023h, 038h, 003h, 03eh, 085h, 095h, 007h, 007h
 1690 E3AF7A1F30        db      0e3h, 0afh, 07ah, 01fh, 030h, 002h, 0c6h, 005h, 057h, 07eh, 0e1h, 026h, 001h, 0e6h, 041h
 16A0 0E7DFE2338        db      00eh, 07dh, 0feh, 023h, 038h, 009h, 021h, 0d7h, 0f6h, 0cdh, 001h, 0f7h, 0c3h, 05ch, 0f6h
 16B0 452100FEC3        db      045h, 021h, 000h, 0feh, 0c3h, 044h, 0f0h, 0edh, 073h, 008h, 0c2h, 031h, 008h, 0c2h, 0e5h
 16C0 C5F5760102        db      0c5h, 0f5h, 076h, 001h, 002h, 059h, 059h, 059h, 0c4h, 0f3h, 000h, 001h, 002h, 003h, 000h
 16D0 00A0A1A2A3        db      000h, 0a0h, 0a1h, 0a2h, 0a3h, 0f8h, 090h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 16E0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 00ah, 0c9h, 000h, 000h, 0c9h, 000h
 16F0 C900000000        db      0c9h, 000h, 000h, 000h, 000h, 0d7h, 000h, 000h, 0ffh, 001h, 0f0h, 000h, 000h, 000h, 002h
 1700 C3BEF4C31C        db      0c3h, 0beh, 0f4h, 0c3h, 01ch, 0f4h, 0c3h, 027h, 0f4h, 0c3h, 041h, 0f4h, 0c3h, 044h, 0f4h
 1710 96F4C374F4        db      096h, 0f4h, 0c3h, 074h, 0f4h, 0c3h, 05fh, 0f4h, 07eh, 070h, 070h, 001h, 0cdh, 00ch, 0f6h
 1720 D0E640C83E        db      0d0h, 0e6h, 040h, 0c8h, 03eh, 0ffh, 0c9h, 0cdh, 01ch, 0f4h, 0cah, 027h, 0f4h, 0cdh, 000h
 1730 FEE9CA3EF4        db      0feh, 0e9h, 0cah, 03eh, 0f4h, 0feh, 07fh, 0cah, 03bh, 0f4h, 0c9h, 03eh, 008h, 0c9h, 03eh
 1740 C9C303F6CD        db      0c9h, 0c3h, 003h, 0f6h, 0cdh, 05fh, 0f4h, 0cah, 044h, 0f4h, 0dbh, 074h, 0feh, 0f7h, 079h
 1750 5CF4D344D3        db      05ch, 0f4h, 0d3h, 044h, 0d3h, 040h, 0c9h, 07fh, 0d3h, 050h, 0f6h, 080h, 0d3h, 050h, 0c9h
 1760 0CF60601DB        db      00ch, 0f6h, 006h, 001h, 0dbh, 074h, 0feh, 0f7h, 0cah, 06dh, 0f4h, 006h, 004h, 0dbh, 041h
 1770 C8F6FFC9CD        db      0c8h, 0f6h, 0ffh, 0c9h, 0cdh, 00ch, 0f6h, 0dbh, 074h, 0feh, 0f7h, 0dbh, 041h, 0c2h, 08ah
 1780 E602CA74F4        db      0e6h, 002h, 0cah, 074h, 0f4h, 0dbh, 040h, 0e6h, 07fh, 0c9h, 0e6h, 008h, 0cah, 074h, 0f4h
 1790 40E67FD346        db      040h, 0e6h, 07fh, 0d3h, 046h, 0c9h, 0cdh, 00ch, 0f6h, 0dbh, 074h, 0feh, 0f7h, 0dbh, 041h
 17A0 ABF4E601CA        db      0abh, 0f4h, 0e6h, 001h, 0cah, 096h, 0f4h, 079h, 0d3h, 040h, 0c9h, 0e6h, 004h, 0cah, 096h
 17B0 79F680D340        db      079h, 0f6h, 080h, 0d3h, 040h, 0e6h, 07fh, 0d3h, 040h, 0f6h, 080h, 0d3h, 040h, 0c9h, 0afh
 17C0 0300320400        db      003h, 000h, 032h, 004h, 000h, 0dbh, 075h, 0feh, 0f7h, 0c2h, 0dch, 0f4h, 03eh, 0ceh, 0d3h
 17D0 3E37D3513A        db      03eh, 037h, 0d3h, 051h, 03ah, 018h, 0f4h, 0d3h, 058h, 0c3h, 0e6h, 0f4h, 0feh, 0dfh, 0c2h
 17E0 F43E0DCD52        db      0f4h, 03eh, 00dh, 0cdh, 052h, 0f4h, 0dbh, 074h, 0feh, 0f7h, 0c2h, 0fah, 0f4h, 03eh, 0ceh
 17F0 413E37D341        db      041h, 03eh, 037h, 0d3h, 041h, 03ah, 019h, 0f4h, 0d3h, 048h, 0dbh, 074h, 0feh, 0f7h, 0c2h
 1800 F53ECED341        db      0f5h, 03eh, 0ceh, 0d3h, 041h, 03eh, 037h, 0d3h, 041h, 03ah, 01ah, 0f4h, 0d3h, 048h, 0c3h
 1810 F5FEDFC21B        db      0f5h, 0feh, 0dfh, 0c2h, 01bh, 0f5h, 03eh, 00dh, 0cdh, 0b1h, 0f4h, 0c9h, 000h, 000h, 000h
 1820 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1830 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1840 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1850 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1860 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1870 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1880 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1890 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 18A0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 18B0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 008h, 000h, 011h, 007h
 18C0 21C8F5EDB0        db      021h, 0c8h, 0f5h, 0edh, 0b0h, 0c3h, 000h, 0d7h, 006h, 048h, 044h, 042h, 04fh, 04fh, 054h
 18D0 4BF3B1F0E9        db      04bh, 0f3h, 0b1h, 0f0h, 0e9h, 0f6h, 000h, 000h, 043h, 050h, 04dh, 057h, 04fh, 052h, 04bh
 18E0 2020202020        db      020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h
 18F0 2020202020        db      020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 000h, 000h, 000h
 1900 C355F7C38D        db      0c3h, 055h, 0f7h, 0c3h, 08dh, 0f7h, 0c3h, 011h, 0f7h, 0c3h, 01bh, 0f7h, 0c3h, 0ffh, 0fah
 1910 82F7020001        db      082h, 0f7h, 002h, 000h, 001h, 001h, 0c9h, 000h, 000h, 0c3h, 0b3h, 0efh, 00dh, 07fh, 002h
 1920 618500006B        db      061h, 085h, 000h, 000h, 06bh, 0f8h, 02fh, 0f6h, 000h, 000h, 0c8h, 000h, 000h, 000h, 000h
 1930 FFFFFFFFFF        db      0ffh, 0ffh, 0ffh, 0ffh, 0ffh, 0ffh, 0ffh, 0ffh, 0ffh, 028h, 043h, 029h, 020h, 031h, 039h
 1940 31204E6F72        db      031h, 020h, 04eh, 06fh, 072h, 074h, 068h, 020h, 053h, 074h, 061h, 072h, 020h, 043h, 06fh
 1950 7075746572        db      070h, 075h, 074h, 065h, 072h, 073h, 02ch, 020h, 049h, 06eh, 063h, 02eh, 031h, 000h, 001h
 1960 FEF37E3602        db      0feh, 0f3h, 07eh, 036h, 002h, 023h, 0a6h, 021h, 000h, 0d7h, 020h, 003h, 023h, 023h, 023h
 1970 21595922C4        db      021h, 059h, 059h, 022h, 0c4h, 0f3h, 022h, 0c6h, 0f3h, 0afh, 04fh, 05fh, 032h, 0f3h, 0f3h
 1980 32C3F33268        db      032h, 0c3h, 0f3h, 032h, 068h, 0fdh, 0cdh, 0dfh, 0f0h, 0cdh, 0e6h, 0f6h, 020h, 0e2h, 03eh
 1990 32EAF33216        db      032h, 0eah, 0f3h, 032h, 016h, 0f6h, 03eh, 0c3h, 032h, 000h, 000h, 032h, 005h, 000h, 021h
 19A0 ED22010011        db      0edh, 022h, 001h, 000h, 011h, 006h, 008h, 02ah, 0f4h, 0f3h, 019h, 022h, 006h, 000h, 021h
 19B0 002270FD0E        db      000h, 022h, 070h, 0fdh, 00eh, 01ch, 0cdh, 08dh, 0f7h, 0cdh, 0edh, 0f3h, 03ah, 004h, 000h
 19C0 C93EC332FC        db      0c9h, 03eh, 0c3h, 032h, 0fch, 0eeh, 000h, 0cdh, 000h, 0f4h, 03ah, 0f7h, 0f3h, 0b7h, 0cah
 19D0 F621BAF5C3        db      0f6h, 021h, 0bah, 0f5h, 0c3h, 06fh, 0f6h, 049h, 04ch, 04ch, 045h, 047h, 041h, 04ch, 020h
 19E0 4343455353        db      043h, 043h, 045h, 053h, 053h, 080h, 021h, 000h, 0d7h, 03eh, 001h, 001h, 081h, 000h, 011h
 19F0 09CD3CEDC0        db      009h, 0cdh, 03ch, 0edh, 0c0h, 03eh, 00ah, 001h, 081h, 001h, 011h, 001h, 000h, 0cdh, 03ch
 1A00 C97EB7F8FE        db      0c9h, 07eh, 0b7h, 0f8h, 0feh, 00ah, 030h, 002h, 0f6h, 030h, 04fh, 0cdh, 07bh, 0f2h, 023h
 1A10 F0E521CBF3        db      0f0h, 0e5h, 021h, 0cbh, 0f3h, 006h, 000h, 009h, 046h, 0e1h, 0c9h, 079h, 0feh, 006h, 0d0h
 1A20 21CBF37806        db      021h, 0cbh, 0f3h, 078h, 006h, 000h, 009h, 077h, 00eh, 006h, 009h, 04eh, 0edh, 079h, 0e1h
 1A30 F3ED5B12F6        db      0f3h, 0edh, 05bh, 012h, 0f6h, 026h, 001h, 0cdh, 0b3h, 0efh, 0f5h, 026h, 002h, 0cdh, 0b3h
 1A40 07070707E1        db      007h, 007h, 007h, 007h, 0e1h, 0b4h, 03ch, 028h, 004h, 03dh, 032h, 01ch, 0f6h, 0cdh, 0a6h
 1A50 ED5312F6C9        db      0edh, 053h, 012h, 0f6h, 0c9h, 0dbh, 0d0h, 0e6h, 040h, 028h, 0fah, 0d5h, 0e5h, 0cdh, 030h
 1A60 3A2BF6B728        db      03ah, 02bh, 0f6h, 0b7h, 028h, 013h, 01eh, 005h, 0cdh, 00fh, 0f6h, 016h, 004h, 0cdh, 0e8h
 1A70 1520FA1D20        db      015h, 020h, 0fah, 01dh, 020h, 0f2h, 0cdh, 00fh, 0f6h, 02ah, 01ch, 0f6h, 07dh, 0e1h, 0d1h
 1A80 3CF03ACFF3        db      03ch, 0f0h, 03ah, 0cfh, 0f3h, 0eeh, 040h, 032h, 0cfh, 0f3h, 0d3h, 0f8h, 0c9h, 0e5h, 021h
 1A90 0039F33100        db      000h, 039h, 0f3h, 031h, 000h, 0feh, 0e5h, 0d5h, 0c5h, 0ddh, 0e5h, 0fdh, 0e5h, 079h, 0e6h
 1AA0 FE1F2804E6        db      0feh, 01fh, 028h, 004h, 0e6h, 07eh, 0feh, 00ah, 0cch, 0eeh, 0f7h, 0cdh, 0fch, 0f7h, 021h
 1AB0 F67EE6C028        db      0f6h, 07eh, 0e6h, 0c0h, 028h, 01eh, 00eh, 00ah, 0fah, 0bdh, 0f7h, 0cbh, 0f9h, 0aeh, 077h
 1AC0 EEF721CAF3        db      0eeh, 0f7h, 021h, 0cah, 0f3h, 071h, 0cdh, 0b1h, 0fah, 021h, 023h, 0f6h, 07eh, 0e6h, 001h
 1AD0 2EF6CBC63A        db      02eh, 0f6h, 0cbh, 0c6h, 03ah, 0cah, 0f3h, 0e6h, 07fh, 020h, 006h, 03ah, 022h, 0f6h, 032h
 1AE0 F3FDE1DDE1        db      0f3h, 0fdh, 0e1h, 0ddh, 0e1h, 0c1h, 0d1h, 0e1h, 0f9h, 0cdh, 03ch, 0f0h, 0e1h, 0c9h, 0cdh
 1AF0 EECD51FA3A        db      0eeh, 0cdh, 051h, 0fah, 03ah, 0cah, 0f3h, 0e6h, 07fh, 0c8h, 018h, 0f2h, 051h, 0cdh, 0f7h
 1B00 216BF82224        db      021h, 06bh, 0f8h, 022h, 024h, 0f6h, 03ah, 029h, 0f6h, 0b7h, 0c2h, 077h, 0f9h, 07ah, 0e6h
 1B10 FE7F2888FE        db      0feh, 07fh, 028h, 088h, 0feh, 020h, 0d2h, 0fdh, 087h, 05fh, 016h, 000h, 021h, 02bh, 0f8h
 1B20 195E2356EB        db      019h, 05eh, 023h, 056h, 0ebh, 057h, 0ddh, 0cbh, 005h, 066h, 0e9h, 0fdh, 087h, 0ech, 0f8h
 1B30 F8FD8722FA        db      0f8h, 0fdh, 087h, 022h, 0fah, 0cbh, 0f8h, 0cah, 0f8h, 0e5h, 0f8h, 02bh, 0f9h, 0fdh, 087h
 1B40 8739F9FD87        db      087h, 039h, 0f9h, 0fdh, 087h, 0fdh, 087h, 0fdh, 087h, 0fdh, 087h, 0fdh, 087h, 0d3h, 0f9h
 1B50 F9B3F8CFF9        db      0f9h, 0b3h, 0f8h, 0cfh, 0f9h, 0c0h, 0f8h, 0ffh, 0f8h, 003h, 0f9h, 0e1h, 0f9h, 0e5h, 0f9h
 1B60 8784F9D0F8        db      087h, 084h, 0f9h, 0d0h, 0f8h, 0dch, 0f8h, 023h, 0f9h, 0fdh, 087h, 03ah, 023h, 0f6h, 0e6h
 1B70 FE902028DD        db      0feh, 090h, 020h, 028h, 0ddh, 0cbh, 005h, 0beh, 03eh, 0f0h, 0ddh, 096h, 00ch, 04fh, 016h
 1B80 413A2AF66F        db      041h, 03ah, 02ah, 0f6h, 06fh, 0c6h, 00ah, 05fh, 062h, 01ah, 077h, 02ch, 01ch, 010h, 0fah
 1B90 F280F8AF32        db      0f2h, 080h, 0f8h, 0afh, 032h, 022h, 0f6h, 03eh, 0e6h, 032h, 01fh, 0f6h, 0c1h, 051h, 00eh
 1BA0 CD09F6C159        db      0cdh, 009h, 0f6h, 0c1h, 059h, 00eh, 001h, 0cdh, 009h, 0f6h, 043h, 00eh, 000h, 0cdh, 009h
 1BB0 7A42C92123        db      07ah, 042h, 0c9h, 021h, 023h, 0f6h, 0cbh, 0a6h, 0cbh, 06eh, 020h, 0e0h, 0cbh, 096h, 018h
 1BC0 CDEEF72123        db      0cdh, 0eeh, 0f7h, 021h, 023h, 0f6h, 0cbh, 0aeh, 018h, 0f2h, 0afh, 032h, 02bh, 0f6h, 018h
 1BD0 0E04CD06F6        db      00eh, 004h, 0cdh, 006h, 0f6h, 0cbh, 0a8h, 0cdh, 009h, 0f6h, 018h, 0c0h, 00eh, 004h, 0cdh
 1BE0 F6CBE818F2        db      0f6h, 0cbh, 0e8h, 018h, 0f2h, 0dbh, 083h, 018h, 0b3h, 0afh, 018h, 002h, 03eh, 0ffh, 032h
 1BF0 F618A9DDCB        db      0f6h, 018h, 0a9h, 0ddh, 0cbh, 005h, 08eh, 018h, 0a3h, 0ddh, 0cbh, 005h, 0ceh, 018h, 09dh
 1C00 FF18023E7F        db      0ffh, 018h, 002h, 03eh, 07fh, 032h, 01dh, 0f6h, 0c3h, 09ch, 0f8h, 0cdh, 0eeh, 0f7h, 0afh
 1C10 16F6285A32        db      016h, 0f6h, 028h, 05ah, 032h, 02ah, 0f6h, 0afh, 032h, 01eh, 0f6h, 03ah, 02ah, 0f6h, 032h
 1C20 F6184BCAFD        db      0f6h, 018h, 04bh, 0cah, 0fdh, 087h, 021h, 017h, 0f9h, 018h, 046h, 0cah, 0fdh, 087h, 03ah
 1C30 F6B7201121        db      0f6h, 0b7h, 020h, 011h, 021h, 04bh, 0f9h, 018h, 006h, 0cah, 0fdh, 087h, 021h, 04fh, 0f9h
 1C40 2AF6DDBE01        db      02ah, 0f6h, 0ddh, 0beh, 001h, 07ah, 0c2h, 0fdh, 087h, 018h, 026h, 0ddh, 036h, 000h, 04fh
 1C50 E6DD960C4F        db      0e6h, 0ddh, 096h, 00ch, 04fh, 026h, 04fh, 054h, 041h, 02eh, 0efh, 01eh, 0e5h, 01ah, 077h
 1C60 2D10FA060A        db      02dh, 010h, 0fah, 006h, 00ah, 0afh, 077h, 02dh, 010h, 0fch, 025h, 0f2h, 057h, 0f9h, 021h
 1C70 F82224F6C3        db      0f8h, 022h, 024h, 0f6h, 0c3h, 0fah, 087h, 0feh, 01bh, 028h, 00fh, 0feh, 03dh, 028h, 01ch
 1C80 BD2830AF32        db      0bdh, 028h, 030h, 0afh, 032h, 029h, 0f6h, 0c3h, 09ch, 0f8h, 07ah, 0feh, 024h, 0cah, 0f3h
 1C90 FE25CAF9F8        db      0feh, 025h, 0cah, 0f9h, 0f8h, 0feh, 03dh, 028h, 0ebh, 018h, 0e8h, 07ah, 0d6h, 020h, 038h
 1CA0 FE1830DF87        db      0feh, 018h, 030h, 0dfh, 087h, 057h, 087h, 087h, 082h, 0ddh, 086h, 004h, 032h, 02dh, 0f6h
 1CB0 BD18D17AD6        db      0bdh, 018h, 0d1h, 07ah, 0d6h, 020h, 038h, 0cbh, 0feh, 050h, 030h, 0c7h, 032h, 02ch, 0f6h
 1CC0 C4F918AD2A        db      0c4h, 0f9h, 018h, 0adh, 02ah, 02ch, 0f6h, 022h, 01eh, 0f6h, 021h, 083h, 0f9h, 018h, 0a2h
 1CD0 0118023E02        db      001h, 018h, 002h, 03eh, 002h, 032h, 014h, 0f6h, 021h, 023h, 0f6h, 0cbh, 0eeh, 0cbh, 0d6h
 1CE0 A206001802        db      0a2h, 006h, 000h, 018h, 002h, 006h, 001h, 03ah, 0cah, 0f3h, 0e6h, 07fh, 07ah, 0cah, 0fdh
 1CF0 78322EF6C3        db      078h, 032h, 02eh, 0f6h, 0c3h, 09ch, 0f8h, 0e1h, 00eh, 000h, 0cdh, 006h, 0f6h, 058h, 00ch
 1D00 06F64BC50E        db      006h, 0f6h, 04bh, 0c5h, 00eh, 002h, 0cdh, 006h, 0f6h, 04ah, 0c5h, 001h, 000h, 0f8h, 0cdh
 1D10 F60101F9CD        db      0f6h, 001h, 001h, 0f9h, 0cdh, 009h, 0f6h, 001h, 002h, 0fch, 0cdh, 009h, 0f6h, 0ddh, 021h
 1D20 F6E9CDEEF7        db      0f6h, 0e9h, 0cdh, 0eeh, 0f7h, 021h, 000h, 000h, 022h, 028h, 0f6h, 022h, 01eh, 0f6h, 022h
 1D30 F6CD3FFA21        db      0f6h, 0cdh, 03fh, 0fah, 021h, 01dh, 0f6h, 036h, 07fh, 021h, 0d0h, 0f8h, 0c3h, 071h, 0f9h
 1D40 0000110100        db      000h, 000h, 011h, 001h, 000h, 001h, 0ffh, 04fh, 075h, 0edh, 0b0h, 001h, 005h, 000h, 0c3h
 1D50 F6E52115F6        db      0f6h, 0e5h, 021h, 015h, 0f6h, 0dbh, 060h, 02fh, 0a6h, 0c4h, 0b7h, 0fah, 0e1h, 0dbh, 0e0h
 1D60 04C8D3B03A        db      004h, 0c8h, 0d3h, 0b0h, 03ah, 0cah, 0f3h, 0e6h, 07fh, 0c8h, 0e5h, 02ah, 014h, 0f6h, 095h
 1D70 03856FAF67        db      003h, 085h, 06fh, 0afh, 067h, 020h, 01bh, 0c5h, 0d5h, 0e5h, 0ddh, 0e5h, 0fdh, 0e5h, 021h
 1D80 F6CB863A2E        db      0f6h, 0cbh, 086h, 03ah, 02eh, 0f6h, 0b6h, 077h, 0cdh, 0b1h, 0fah, 0fdh, 0e1h, 0ddh, 0e1h
 1D90 D1C13ACAF3        db      0d1h, 0c1h, 03ah, 0cah, 0f3h, 0e6h, 080h, 0b4h, 032h, 0cah, 0f3h, 07dh, 0f2h, 0a1h, 0fah
 1DA0 3CE1C5F50E        db      03ch, 0e1h, 0c5h, 0f5h, 00eh, 005h, 0cdh, 006h, 0f6h, 0f1h, 080h, 047h, 0cdh, 009h, 0f6h
 1DB0 C9CDF7F9C3        db      0c9h, 0cdh, 0f7h, 0f9h, 0c3h, 06eh, 0f9h, 0c5h, 0d5h, 0e5h, 0ddh, 0e5h, 0afh, 032h, 015h
 1DC0 D36021E7FA        db      0d3h, 060h, 021h, 0e7h, 0fah, 0e5h, 04eh, 0cdh, 0fch, 0f7h, 0e1h, 023h, 07eh, 0b7h, 0c2h
 1DD0 FACD55F7FE        db      0fah, 0cdh, 055h, 0f7h, 0feh, 00dh, 0cah, 0e1h, 0fah, 0f3h, 03eh, 0fch, 0d3h, 0a2h, 0c3h
 1DE0 80DDE1E1D1        db      080h, 0ddh, 0e1h, 0e1h, 0d1h, 0c1h, 0c9h, 00dh, 052h, 041h, 04dh, 020h, 050h, 041h, 052h
 1DF0 5459204552        db      054h, 059h, 020h, 045h, 052h, 052h, 04fh, 052h, 007h, 000h, 0cdh, 008h, 0fbh, 0fbh, 0c9h
 1E00 F5E5CD08FB        db      0f5h, 0e5h, 0cdh, 008h, 0fbh, 0e1h, 0f1h, 0c9h, 0edh, 073h, 035h, 0fbh, 031h, 0dch, 0fdh
 1E10 E5CDE8EE2A        db      0e5h, 0cdh, 0e8h, 0eeh, 02ah, 0cbh, 0f3h, 0e5h, 03ah, 0cdh, 0f3h, 0f5h, 0cdh, 0f0h, 0f3h
 1E20 51FAF132CD        db      051h, 0fah, 0f1h, 032h, 0cdh, 0f3h, 0d3h, 0a2h, 0e1h, 022h, 0cbh, 0f3h, 07ch, 0d3h, 0a1h
 1E30 D3A0E1F131        db      0d3h, 0a0h, 0e1h, 0f1h, 031h, 02dh, 0e2h, 0c9h, 03eh, 059h, 032h, 0c3h, 0f3h, 032h, 0c4h
 1E40 3EC93262EE        db      03eh, 0c9h, 032h, 062h, 0eeh, 001h, 081h, 002h, 011h, 001h, 000h, 021h, 000h, 0feh, 03eh
 1E50 CD44F02101        db      0cdh, 044h, 0f0h, 021h, 001h, 0feh, 006h, 00bh, 07eh, 0feh, 020h, 038h, 00bh, 0feh, 05bh
 1E60 07230520F3        db      007h, 023h, 005h, 020h, 0f3h, 0c3h, 05ch, 0f6h, 03eh, 0ffh, 032h, 0f8h, 0f3h, 032h, 0f6h
 1E70 3E0432F9F6        db      03eh, 004h, 032h, 0f9h, 0f6h, 03eh, 0c8h, 032h, 062h, 0eeh, 0c3h, 05ch, 0f6h, 000h, 000h
 1E80 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1E90 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1EA0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1EB0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1EC0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1ED0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1EE0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1EF0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1F00 FAE5E5E5E5        db      0fah, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 1F10 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 1F20 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 1F30 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 1F40 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 1F50 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 1F60 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 1F70 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 1F80 E5FFFFFFFF        db      0e5h, 0ffh, 0ffh, 0ffh, 0ffh, 0ceh, 0ffh, 0efh, 020h, 07fh, 0c1h, 03fh, 0ffh, 0ffh, 0ffh
 1F90 FFD2225FFC        db      0ffh, 0d2h, 022h, 05fh, 0fch, 000h, 000h, 000h, 000h, 000h, 041h, 04bh, 0c7h, 022h, 092h
 1FA0 734B8B8080        db      073h, 04bh, 08bh, 080h, 080h, 080h, 080h, 080h, 080h, 080h, 000h, 000h, 000h, 000h, 000h
 1FB0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 0ffh, 0ffh, 0ffh, 0ffh, 0ffh
 1FC0 FFFFFFFFFF        db      0ffh, 0ffh, 0ffh, 0ffh, 0ffh, 0feh, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 0ffh, 000h
 1FD0 000000D7B4        db      000h, 000h, 000h, 0d7h, 0b4h, 011h, 008h, 080h, 080h, 080h, 080h, 080h, 080h, 080h, 080h
 1FE0 8080800000        db      080h, 080h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 1FF0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 2000 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 2010 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 2020 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 2030 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 2040 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 2050 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 2060 0000000000        db      000h, 000h, 000h, 000h, 000h, 002h, 000h, 00fh, 000h, 001h, 010h, 002h, 000h, 00fh, 000h
 2070 800000FF81        db      080h, 000h, 000h, 0ffh, 081h, 000h, 001h, 00ah, 087h, 0fbh, 02bh, 0e2h, 000h, 000h, 000h
 2080 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
 2090 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 0a1h, 0efh, 04dh, 0efh, 065h, 0efh, 0edh
 20A0 CDEFCDEF4D        db      0cdh, 0efh, 0cdh, 0efh, 04dh, 0efh, 03bh, 0eeh, 04eh, 0eeh, 01ah, 0eeh, 042h, 000h, 042h
 20B0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 032h, 034h, 07bh, 083h, 032h
 20C0 4330314332        db      043h, 030h, 031h, 043h, 032h, 034h, 035h, 030h, 037h, 043h, 044h, 035h, 0deh, 0f0h, 000h
 20D0 010222FB54        db      001h, 002h, 022h, 0fbh, 054h, 003h, 001h, 002h, 00eh, 0e2h, 054h, 000h, 000h, 000h, 000h
 20E0 0000000000        db      000h, 000h, 000h, 000h, 000h, 000h, 0f1h, 0eeh, 034h, 004h, 022h, 0fah, 000h, 0f8h, 06bh
 20F0 6BF8B0F8AE        db      06bh, 0f8h, 0b0h, 0f8h, 0aeh, 0f7h, 021h, 0e2h, 0f0h, 000h, 03eh, 000h, 03eh, 000h, 039h
 2100 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2110 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2120 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2130 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2140 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2150 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2160 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2170 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2180 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2190 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 21A0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 21B0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 21C0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 21D0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 21E0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 21F0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2200 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2210 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2220 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2230 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2240 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2250 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2260 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2270 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2280 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2290 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 22A0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 22B0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 22C0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 22D0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 22E0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 22F0 E5E5E5E5E5        db      0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h, 0e5h
 2300 =         BiosDataEnd     equ     $
                
 2300                   end
